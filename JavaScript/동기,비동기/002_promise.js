//promise

var 프로미스 = new Promise(); // = 성공/실패 판정 기계 / ~일 경우 성공이고, ~일 경우 실패입니다.


프로미스.then(function () {//프로미스가 성공일 경우 실행할 코드(콜백함수 만드는거랑 비슷 / 콜백함수보다는 기능 많음 / 옆으로 길어지지 않아서 좋음)
}).then(function () {
})


프로미스.catch(function () {//실패할 경우에도 코드실행 가능(일반 콜백함수 : 1번 실행 후 ~ 2번 실행해줘 밖에 못했음.)
}).then(function () {

})


프로미스.finally(function () {
}).then(function () {

})


// 옆으로 길어지지 않아서 좋음
// 실패할 경우에도 코드실행 가능

// (일반 콜백함수)
//  1번 실행 후 ~ 2번 실행해줘 밖에 못했음

// (Promise로 만든거)
// 1번 실행 후 성공시 2번 실행해주세요~ 실패시 3번 실행해 주세요~


//-------------------------------------------------


// = 성공/실패 판정 기계 / ~일 경우 성공이고, ~일 경우 실패입니다.
var 프로미스 = new Promise(function (성공, 실패) {
  성공(); //성공판정내림
  실패(); //실패판정내림
});

프로미스.then(function () {
  //성공판정내림이 오면 / then 안에 있는 것 실행 
}).catch(function () {
  //실패판정 오면 / catch 안에 있는 것 실행
})



const 프로미스 = new Promise(function (resolve, reject) {
  if (/*비동기 처리 성공*/){
    resolve('result');
  } else {/*비동기 처리 실패*/
    reject('failure reason');
  }
});

프로미스.then(function () {
  //성공판정내림이 오면 / then 안에 있는 것 실행 
}).catch(function () {
  //실패판정 오면 / catch 안에 있는 것 실행
})


//-------------------------------------------------


var 프로미스 = new Promise(function (성공, 실패) {
  var 어려운연산 = 1 + 1; // 1+1연산이 끝나면 성공()판정을 내려주세요~
  성공();
  // 실패();
});

프로미스.then(function () {
  console.log('성공했어요')
}).catch(function () {
  // console.log('실패했어요')
})



//-------------------------------------------------


var 프로미스 = new Promise(function (성공, 실패) {
  var 어려운연산 = 1 + 1;
  성공(어려운연산); //성공 결과를 then 함수까지 전해짐
  실패();
});

프로미스.then(function (결과) {
  console.log(결과) //프로미스 위에서 성공(어려운연산)타고 then 파라미터로 전달되어 들어옴. var 어려운연산의 결과값 console.log로 출력
}).catch(function () {
  // console.log('실패했어요')
})



//-------------------------------------------------


var 프로미스 = new Promise(function (성공, 실패) {
  setTimeout(function () {
    성공(); // 1초 후에 성공을 판정하는 프로미스
  }, 1000);
});

프로미스.then(function () {
  console.log('성공했어요') // 성공시 특정코드 실행 1초후
}).catch(function () {
  console.log('실패했어요')
})

// 1. 프로미스 기계 발동!
// 2. 성공/실패에 따라 코드 실행


//-------------------------------------------------

// Promise의 3가지 상태
// 1. 성공하면 <resolved>
// 2. 판정 대기중이면 <pending>
// 3. 실패하면 <rejected>
// 성공을 실패나 대기상태로 다시 되돌릴 순 없음.

// Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태
// Fulfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태
// Rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태



// 오해 : 비동기적 처리가 가능하게 바꿔주는 마법의 문법 X
// 그냥 콜백함수 디자인의 대체품.
// Promise가 적용된 곳들 jQuery.ajax()  /  fecth()

//Promise는 동기를 비동기로 만들어주는 코드가 아님. Promise는 비동기적 실행과 전혀 상관이 없음. 그냥 코딩을 예쁘게 할 수 있는 일종의 디자인 패턴. 예를 들면.. Promise 안에 10초 걸리는 어려운 연산을 시키면 10초동안 브라우저가 멈춤. 10초 걸리는 연산을 해결될 때 까지 대기실에 제껴두고 그런거 아님. (그냥 원래 자바스크립트는 평상시엔 동기적으로 실행이 되며 비동기 실행을 지원하는 특수한 함수들 덕분에 가끔 비동기적 실행이 될 뿐입니다.) 

