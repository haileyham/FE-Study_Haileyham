// 자바스크립트는 동기식처리(Synchronous)
// 한번에 코드 한줄씩 차례차례 실행
// 자바스크립트를 실행하는 웹브라우저는 stack이라는 코드 실행 공간이 있는데 거기서 코드를 한줄한줄 차례로 실행

console.log(1);
console.log(2);
console.log(3);





// 비동기처리 (asynchronous)
// 특정 코드를 1초 후에 실행하고 싶으면 어떻게하죠?
// 일반적인 프로그래밍 언어에서 이런 코드를 작성하려면......

print(1)
time.sleep(1)
print(2)

// 파이썬
// time.sleep(1)이라는건 1초 쉬어주세요 라는 뜻
// 그럼 1이라는게 출력되고 / 1초 쉬고 / 2라는게 출력


console.log(1);
setTimeout(function(){}, 1000);
console.log(2);
//자바스크립트에서 1초 쉬고 뭔가 출력하는 코드를 작성하려했지만 안됨
//1,2가 콘솔창에 동시에 출력됨
//왜그럴까??

//자바스크립트는 보통 프로그래밍 언어들과 생각하는 방식자체가 다름. 자바스크립트 실행머신인 웹브라우저는 이런 특수한 코드들을 발견하면 약간 제쳐두고 다른 코드부터 실행하려고 함.


console.log(1);
//오래걸리거나 실행까지 오래걸리는 함수들
//비동기식처리 도와주는 함수
//Web API라는 공간에 보내놓음(실행대기실). 실행을 할 때까지 기다렸다가 실행할 때 가져옴
//Web API 덕분에 오래걸리는 작업이 있으면 제껴두고 실행이 바로바로 가능한 코드들부터 처리하는 비동기식 처리가능(비동기식처리(Asynchronous))
//이건 자바스크립트 언어 자체의 기능이 아니라 자바스크립트 실행을 도와주는 웹브라우저 덕분에 해낼 수 있는 것
setTimeout(()=>{console.log(2)},1000); //딜레이시간 / 이 코드는 1초간 Web API 대기실로 보내짐
addEventListener('click',function(){}) //클릭하기까지
$.ajax() //서버랑 응답시간 걸림


console.log(3); //이걸 바로 실행

//1
//3
//2
//출력됨 / 다른 언어에서는 중간에 1초를 멈춤, 순서대로 나옴

//비동기식처리 도와주는 함수 = 오래걸리는 작업이 있으면 제껴두고 다른거부터 처리하는 방식(자바스크립트가 아니라 자바스크립트 실행하는 브라우저 덕분에 가능)


//그냥 자바스크립트는 오래걸리는 연산 만나면 멈춤(=동기식 처리, synchronous)
//Web API와 연관된 특수한 함수들을 쓰면 작업이 오래걸릴 때 다른거부터 실행가능(=비동기식 처리, asynchronous) - 순서대로 실행x




//JavaScript를 순차적으로 실행하려면?
//= 콜백함수를 사용 
// 함수안에 함수 / arrow function도 가능 / 함수이름도 가능 : 함수이름()하면안됨, 그러면 함수 바로 실행하는 것


//비동기상황 등
console.log(1);
setTimeout(function(){console.log(2)},1000); 
// addEventListener('click',function(){}) 
console.log(3);
//1,3 먼저 출력하고, 1초뒤에 2출력




// 콜백함수 디자인

function 첫째함수(뻥){
  console.log(101);
  뻥(); //첫째함수에 둘째함수가 인자로 뻥 파라미터 타고 들어와서 /뻥()=둘째함수(); 바로실행
}

function 둘째함수(){
  console.log(102)
}

// 첫째함수();
// 둘째함수();

//첫째함수() 다음에 둘째함수()를 실행하고 싶음
//위에처럼 하면 순차적 실행 안 될 수 있음

첫째함수(둘째함수);

//콜백함수를 이용한 함수 디자인




//코드 가독성 / 첫째함수 실행 > 둘째 > 셋째 > 넷째 ...실행
첫째함수(function (){
  둘째함수(function(){
    셋째함수(function(){

    })
  })
})


//콜백함수의 문제점
// => 더 쉽게 쓰기 위한 Promise 패턴

첫째함수().then(function(){
  // 그 다음 실행할거
}).then(function(){
  // 그 다음 실행할거
})

//위와 같이 쓰려면 첫째 함수를 promise로 디자인 해놔야함
//옆으로 길어지지 않고 then이라는 키워드 덕분에 그나마 뭘 하는지도 파악이 쉬움